// Code generated by ogen, DO NOT EDIT.

package aapi

import (
	"math/bits"
	"strconv"

	"github.com/go-faster/errors"
	"github.com/go-faster/jx"

	"github.com/ogen-go/ogen/validate"
)

// Encode implements json.Marshaler.
func (s *Balance) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *Balance) encodeFields(e *jx.Encoder) {
	{
		if s.Blockchain.Set {
			e.FieldStart("blockchain")
			s.Blockchain.Encode(e)
		}
	}
	{
		if s.TokenName.Set {
			e.FieldStart("tokenName")
			s.TokenName.Encode(e)
		}
	}
	{
		if s.TokenSymbol.Set {
			e.FieldStart("tokenSymbol")
			s.TokenSymbol.Encode(e)
		}
	}
	{
		if s.TokenDecimals.Set {
			e.FieldStart("tokenDecimals")
			s.TokenDecimals.Encode(e)
		}
	}
	{
		if s.TokenType.Set {
			e.FieldStart("tokenType")
			s.TokenType.Encode(e)
		}
	}
	{
		if s.ContractAddress.Set {
			e.FieldStart("contractAddress")
			s.ContractAddress.Encode(e)
		}
	}
	{
		if s.HolderAddress.Set {
			e.FieldStart("holderAddress")
			s.HolderAddress.Encode(e)
		}
	}
	{
		if s.Balance.Set {
			e.FieldStart("balance")
			s.Balance.Encode(e)
		}
	}
	{
		if s.BalanceRawInteger.Set {
			e.FieldStart("balanceRawInteger")
			s.BalanceRawInteger.Encode(e)
		}
	}
	{
		if s.BalanceUsd.Set {
			e.FieldStart("balanceUsd")
			s.BalanceUsd.Encode(e)
		}
	}
	{
		if s.TokenPrice.Set {
			e.FieldStart("tokenPrice")
			s.TokenPrice.Encode(e)
		}
	}
	{
		if s.Thumbnail.Set {
			e.FieldStart("thumbnail")
			s.Thumbnail.Encode(e)
		}
	}
}

var jsonFieldsNameOfBalance = [12]string{
	0:  "blockchain",
	1:  "tokenName",
	2:  "tokenSymbol",
	3:  "tokenDecimals",
	4:  "tokenType",
	5:  "contractAddress",
	6:  "holderAddress",
	7:  "balance",
	8:  "balanceRawInteger",
	9:  "balanceUsd",
	10: "tokenPrice",
	11: "thumbnail",
}

// Decode decodes Balance from json.
func (s *Balance) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode Balance to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "blockchain":
			if err := func() error {
				s.Blockchain.Reset()
				if err := s.Blockchain.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"blockchain\"")
			}
		case "tokenName":
			if err := func() error {
				s.TokenName.Reset()
				if err := s.TokenName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tokenName\"")
			}
		case "tokenSymbol":
			if err := func() error {
				s.TokenSymbol.Reset()
				if err := s.TokenSymbol.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tokenSymbol\"")
			}
		case "tokenDecimals":
			if err := func() error {
				s.TokenDecimals.Reset()
				if err := s.TokenDecimals.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tokenDecimals\"")
			}
		case "tokenType":
			if err := func() error {
				s.TokenType.Reset()
				if err := s.TokenType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tokenType\"")
			}
		case "contractAddress":
			if err := func() error {
				s.ContractAddress.Reset()
				if err := s.ContractAddress.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"contractAddress\"")
			}
		case "holderAddress":
			if err := func() error {
				s.HolderAddress.Reset()
				if err := s.HolderAddress.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"holderAddress\"")
			}
		case "balance":
			if err := func() error {
				s.Balance.Reset()
				if err := s.Balance.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"balance\"")
			}
		case "balanceRawInteger":
			if err := func() error {
				s.BalanceRawInteger.Reset()
				if err := s.BalanceRawInteger.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"balanceRawInteger\"")
			}
		case "balanceUsd":
			if err := func() error {
				s.BalanceUsd.Reset()
				if err := s.BalanceUsd.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"balanceUsd\"")
			}
		case "tokenPrice":
			if err := func() error {
				s.TokenPrice.Reset()
				if err := s.TokenPrice.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tokenPrice\"")
			}
		case "thumbnail":
			if err := func() error {
				s.Thumbnail.Reset()
				if err := s.Thumbnail.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"thumbnail\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode Balance")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *Balance) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *Balance) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *BalancesReply) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *BalancesReply) encodeFields(e *jx.Encoder) {
	{
		if s.NextPageToken.Set {
			e.FieldStart("nextPageToken")
			s.NextPageToken.Encode(e)
		}
	}
	{
		if s.TotalBalanceUsd.Set {
			e.FieldStart("totalBalanceUsd")
			s.TotalBalanceUsd.Encode(e)
		}
	}
	{
		if s.TotalCount.Set {
			e.FieldStart("totalCount")
			s.TotalCount.Encode(e)
		}
	}
	{
		if s.Assets != nil {
			e.FieldStart("assets")
			e.ArrStart()
			for _, elem := range s.Assets {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.BlockHeight.Set {
			e.FieldStart("blockHeight")
			s.BlockHeight.Encode(e)
		}
	}
}

var jsonFieldsNameOfBalancesReply = [5]string{
	0: "nextPageToken",
	1: "totalBalanceUsd",
	2: "totalCount",
	3: "assets",
	4: "blockHeight",
}

// Decode decodes BalancesReply from json.
func (s *BalancesReply) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode BalancesReply to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "nextPageToken":
			if err := func() error {
				s.NextPageToken.Reset()
				if err := s.NextPageToken.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"nextPageToken\"")
			}
		case "totalBalanceUsd":
			if err := func() error {
				s.TotalBalanceUsd.Reset()
				if err := s.TotalBalanceUsd.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"totalBalanceUsd\"")
			}
		case "totalCount":
			if err := func() error {
				s.TotalCount.Reset()
				if err := s.TotalCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"totalCount\"")
			}
		case "assets":
			if err := func() error {
				s.Assets = make([]Balance, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem Balance
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Assets = append(s.Assets, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"assets\"")
			}
		case "blockHeight":
			if err := func() error {
				s.BlockHeight.Reset()
				if err := s.BlockHeight.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"blockHeight\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode BalancesReply")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *BalancesReply) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *BalancesReply) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *BalancesRequest) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *BalancesRequest) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("walletAddress")
		e.Str(s.WalletAddress)
	}
	{
		if s.Blockchain != nil {
			e.FieldStart("blockchain")
			e.ArrStart()
			for _, elem := range s.Blockchain {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.BlockHeight.Set {
			e.FieldStart("blockHeight")
			s.BlockHeight.Encode(e)
		}
	}
	{
		if s.OnlyWhitelisted.Set {
			e.FieldStart("onlyWhitelisted")
			s.OnlyWhitelisted.Encode(e)
		}
	}
	{
		if s.NativeFirst.Set {
			e.FieldStart("nativeFirst")
			s.NativeFirst.Encode(e)
		}
	}
	{
		if s.PageSize.Set {
			e.FieldStart("pageSize")
			s.PageSize.Encode(e)
		}
	}
	{
		if s.PageToken.Set {
			e.FieldStart("pageToken")
			s.PageToken.Encode(e)
		}
	}
}

var jsonFieldsNameOfBalancesRequest = [7]string{
	0: "walletAddress",
	1: "blockchain",
	2: "blockHeight",
	3: "onlyWhitelisted",
	4: "nativeFirst",
	5: "pageSize",
	6: "pageToken",
}

// Decode decodes BalancesRequest from json.
func (s *BalancesRequest) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode BalancesRequest to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "walletAddress":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				v, err := d.Str()
				s.WalletAddress = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"walletAddress\"")
			}
		case "blockchain":
			if err := func() error {
				s.Blockchain = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.Blockchain = append(s.Blockchain, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"blockchain\"")
			}
		case "blockHeight":
			if err := func() error {
				s.BlockHeight.Reset()
				if err := s.BlockHeight.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"blockHeight\"")
			}
		case "onlyWhitelisted":
			if err := func() error {
				s.OnlyWhitelisted.Reset()
				if err := s.OnlyWhitelisted.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"onlyWhitelisted\"")
			}
		case "nativeFirst":
			if err := func() error {
				s.NativeFirst.Reset()
				if err := s.NativeFirst.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"nativeFirst\"")
			}
		case "pageSize":
			if err := func() error {
				s.PageSize.Reset()
				if err := s.PageSize.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pageSize\"")
			}
		case "pageToken":
			if err := func() error {
				s.PageToken.Reset()
				if err := s.PageToken.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pageToken\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode BalancesRequest")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000001,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfBalancesRequest) {
					name = jsonFieldsNameOfBalancesRequest[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *BalancesRequest) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *BalancesRequest) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes bool as json.
func (o OptBool) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Bool(bool(o.Value))
}

// Decode decodes bool from json.
func (o *OptBool) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptBool to nil")
	}
	o.Set = true
	v, err := d.Bool()
	if err != nil {
		return err
	}
	o.Value = bool(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptBool) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptBool) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes float64 as json.
func (o OptFloat64) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Float64(float64(o.Value))
}

// Decode decodes float64 from json.
func (o *OptFloat64) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptFloat64 to nil")
	}
	o.Set = true
	v, err := d.Float64()
	if err != nil {
		return err
	}
	o.Value = float64(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptFloat64) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptFloat64) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes string as json.
func (o OptString) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes string from json.
func (o *OptString) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptString to nil")
	}
	o.Set = true
	v, err := d.Str()
	if err != nil {
		return err
	}
	o.Value = string(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptString) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptString) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}
